---
globs: *.ts,*.tsx
description: TypeScript conventions and best practices
---

# TypeScript Conventions

## Type Definitions

- Define interfaces for all data structures
- Use descriptive type names that indicate purpose
- Place shared types in `types/` directory or `lib/types.ts`

## Component Props

- Always define props interfaces for React components
- Use optional props with `?` when appropriate
- Example:

```typescript
interface InvoiceRowProps {
  invoice: Invoice;
  onEdit?: (invoice: Invoice) => void;
  isSelected?: boolean;
}
```

## API Response Types

- Create types for all API responses
- Include error response types
- Use union types for different response states

## Generic Types

- Use generics for reusable components and functions
- Provide meaningful generic parameter names
- Example: `Component<TData, TError>`

## Null Safety

- Use strict null checks
- Prefer optional chaining (`?.`) over explicit null checks
- Use non-null assertion (`!`) only when absolutely certain
