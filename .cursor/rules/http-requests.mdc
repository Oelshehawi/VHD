---
alwaysApply: true
description: HTTP request patterns and data fetching preferences
---

# HTTP Requests and Data Fetching

## Preferred HTTP Client

- Use plain `fetch` API instead of axios
- No need for additional HTTP client libraries
- Leverage native browser APIs for better performance

## Fetch Usage Pattern

```typescript
const response = await fetch("/api/endpoint", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify(data),
});

if (!response.ok) {
  throw new Error("Request failed");
}

const result = await response.json();
```

## Error Handling

- Always check `response.ok` before parsing JSON
- Handle network errors appropriately
- Provide meaningful error messages to users

## API Integration

- Place data fetching logic in custom hooks when reusable
- Keep API calls close to where the data is consumed
- Use TypeScript interfaces for API response types
